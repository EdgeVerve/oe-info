{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`oe-info`\nA element used to display formatted values of numeric, string and date type\n\n### Styling\n\n`<oe-info>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--oe-info-label` | Mixin applied to label section | {}\n`--oe-info-value` | Mixin applied to value section | {}",
      "summary": "",
      "path": "oe-info.js",
      "properties": [
        {
          "name": "errorPlaceholders",
          "type": "Array | null | undefined",
          "description": "i18n placeholders for the error",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 33,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "userErrorMessage",
          "type": "Object | null | undefined",
          "description": "User specified Custom error message\nIf userErrorMessage is defined, show appropriate user-error-message\nwhich is either an object\n   ```{\n      rangeOverflow:'Date should be prior',\n      default: 'Invalid Value in field'\n   }```\nor a string, 'Invalid value'\nSo check if specific error-coode is defined in user-error-message object\nIf not, see if 'default' error-code is defined\notherwise if user-error-message is string, show that error-message,\nif not, then resort to incoming-error-message.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "errorMessage",
          "type": "string | null | undefined",
          "description": "Error message displayed",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 54,
              "column": 8
            },
            "end": {
              "line": 57,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_hasCustomMessage",
          "type": "boolean | null | undefined",
          "description": "Flag for Custom error message/code",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 60,
              "column": 8
            },
            "end": {
              "line": 63,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validationFunction",
          "type": "string | null | undefined",
          "description": "Custom validation function",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validateOnInput",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "fieldId",
          "type": "string | null | undefined",
          "description": "binding to property",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "maskPattern",
          "type": "string | null | undefined",
          "description": "RegExp to choose the substring(s) to be masked",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 27,
              "column": 8
            },
            "end": {
              "line": 29,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "maskPatternFlag",
          "type": "string | null | undefined",
          "description": "RegExp  flag to be used with the `maskPattern`",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 34,
              "column": 8
            },
            "end": {
              "line": 36,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "maskChar",
          "type": "string | null | undefined",
          "description": "Character that is used to mask the characters present in the substring(s) matching the `maskPattern`\nIf `maskString` property overrides this value.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 42,
              "column": 8
            },
            "end": {
              "line": 45,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"X\"",
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "maskString",
          "type": "string | null | undefined",
          "description": "String that is used to mask the substring(s) matching the `maskPattern`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 50,
              "column": 8
            },
            "end": {
              "line": 52,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "appendCharLength",
          "type": "number | null | undefined",
          "description": "Appends specified number of `maskChar` to the input when it is blured.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 57,
              "column": 8
            },
            "end": {
              "line": 60,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "label",
          "type": "string | null | undefined",
          "description": "Label for the element",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 6
            },
            "end": {
              "line": 109,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "value",
          "type": "Object | null | undefined",
          "description": "Value to format and display",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 6
            },
            "end": {
              "line": 117,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_refresh\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "display",
          "type": "string | null | undefined",
          "description": "formatted display value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 6
            },
            "end": {
              "line": 125,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "type",
          "type": "string | null | undefined",
          "description": "`type` controls how the `value` is formatted\n* `double|number|decimal` : `value` is converted to locale string based on given `precision`\n* `date`: if `format` is specified, value is formatted using momentjs. If `format is not provided, toLocaleDateString function is used for formatting.\n* `boolean`: `true` is formatted as 'Yes' and `false` is formatted as 'No'. You can use Literal i18n translations to customize the value.\n* `*` : For everything else, no formatting is applied.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 6
            },
            "end": {
              "line": 138,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_refresh\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"text\""
        },
        {
          "name": "precision",
          "type": "number | null | undefined",
          "description": "Decimal display precision for `type` : [number, double , decimal]",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 6
            },
            "end": {
              "line": 147,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_refresh\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "2"
        },
        {
          "name": "format",
          "type": "string | null | undefined",
          "description": "Format string used to format",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 152,
              "column": 6
            },
            "end": {
              "line": 155,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_refresh\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "layout",
          "type": "string | null | undefined",
          "description": "Controls the relative positions of `label` and `value`.\n* vertical : label is displayed above the value (much like oe-input)\n* horizontal : label is displayed on left and value on right",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 6
            },
            "end": {
              "line": 165,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"vertical\""
        },
        {
          "name": "preferredTimezone",
          "type": "number | null | undefined",
          "description": "If user prefers a different timezone for date to be displayed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 6
            },
            "end": {
              "line": 178,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "setValidity",
          "description": "Sets the vality and errorMessage based on the input parameters and\nthe `userErrorMessage`",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 113,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isValid",
              "type": "boolean",
              "description": "boolean flag for validation"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "error message from the input element"
            },
            {
              "name": "errorPlaceholders",
              "type": "Array",
              "description": "placeholders for errors"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_setValidity",
          "description": "Sets the 'invalid' flag and 'errorMessage'",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 152,
              "column": 4
            },
            "end": {
              "line": 159,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isValid",
              "type": "boolean",
              "description": "boolean flag for validation"
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "error message from the input element"
            },
            {
              "name": "errorPlaceholders",
              "type": "Array",
              "description": "placeholders for errors"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_validate",
          "description": "Override in individual elements to return element specific validity.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 165,
              "column": 4
            },
            "end": {
              "line": 170,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!boolean",
            "desc": "validity of specific element"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validate",
          "description": "Validate, overrides Paper-Input-Behavior's validate method\nUsed to set the validity based on core input element's validity",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 177,
              "column": 4
            },
            "end": {
              "line": 221,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "validity of core input element."
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "connectedCallback",
          "description": "Registers the field through event , so the parent form can save it.\nBinds the 'validationFunction' property based on its type\nAdds eventListener to input based on 'validateOnInput'",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 228,
              "column": 4
            },
            "end": {
              "line": 249,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "hashFunc",
          "description": "Generates a Hash for the given string.",
          "privacy": "public",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 263,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str",
              "type": "string",
              "description": "String for which Hash needs to be computed"
            }
          ],
          "return": {
            "type": "number",
            "desc": "hash number for the given string"
          },
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "_replacer",
          "description": "Return a replaced masked string based on the match.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 74,
              "column": 4
            },
            "end": {
              "line": 76,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "match",
              "type": "Object"
            }
          ],
          "return": {
            "type": "string",
            "desc": "replaced string with maskChar"
          },
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "_maskDisplay",
          "description": "Sets the 'display' after masking the formatted string with the 'maskChar'.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 83,
              "column": 4
            },
            "end": {
              "line": 97,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "formattedDisplay",
              "type": "string",
              "description": "formatted string to be masked"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "_needI18n",
          "description": "For boolean values, we need i18n so that Yes/No etc. can be translated appropriately.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 187,
              "column": 2
            },
            "end": {
              "line": 189,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "string",
              "description": "type of the value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "flag denoting the value is of type Boolean"
          }
        },
        {
          "name": "_getClass",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 2
            },
            "end": {
              "line": 193,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "display"
            }
          ]
        },
        {
          "name": "_refresh",
          "description": "Refresh the display due to either value or some configuration attribute change.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 2
            },
            "end": {
              "line": 294,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "/demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 40,
          "column": 0
        },
        "end": {
          "line": 296,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OeInfo",
      "attributes": [
        {
          "name": "error-placeholders",
          "description": "i18n placeholders for the error",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 33,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "user-error-message",
          "description": "User specified Custom error message\nIf userErrorMessage is defined, show appropriate user-error-message\nwhich is either an object\n   ```{\n      rangeOverflow:'Date should be prior',\n      default: 'Invalid Value in field'\n   }```\nor a string, 'Invalid value'\nSo check if specific error-coode is defined in user-error-message object\nIf not, see if 'default' error-code is defined\notherwise if user-error-message is string, show that error-message,\nif not, then resort to incoming-error-message.",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 49,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "error-message",
          "description": "Error message displayed",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 54,
              "column": 8
            },
            "end": {
              "line": 57,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validation-function",
          "description": "Custom validation function",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "validate-on-input",
          "description": "",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "field-id",
          "description": "binding to property",
          "sourceRange": {
            "file": "../oe-mixins/oe-field-mixin.js",
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 23
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "name": "mask-pattern",
          "description": "RegExp to choose the substring(s) to be masked",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 27,
              "column": 8
            },
            "end": {
              "line": 29,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "mask-pattern-flag",
          "description": "RegExp  flag to be used with the `maskPattern`",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 34,
              "column": 8
            },
            "end": {
              "line": 36,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "mask-char",
          "description": "Character that is used to mask the characters present in the substring(s) matching the `maskPattern`\nIf `maskString` property overrides this value.",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 42,
              "column": 8
            },
            "end": {
              "line": 45,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "mask-string",
          "description": "String that is used to mask the substring(s) matching the `maskPattern`.",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 50,
              "column": 8
            },
            "end": {
              "line": 52,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "append-char-length",
          "description": "Appends specified number of `maskChar` to the input when it is blured.",
          "sourceRange": {
            "file": "../oe-mixins/data-mask-mixin.js",
            "start": {
              "line": 57,
              "column": 8
            },
            "end": {
              "line": 60,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "OEDataMaskMixin"
        },
        {
          "name": "label",
          "description": "Label for the element",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 6
            },
            "end": {
              "line": 109,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "value",
          "description": "Value to format and display",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 6
            },
            "end": {
              "line": 117,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "display",
          "description": "formatted display value",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 6
            },
            "end": {
              "line": 125,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "type",
          "description": "`type` controls how the `value` is formatted\n* `double|number|decimal` : `value` is converted to locale string based on given `precision`\n* `date`: if `format` is specified, value is formatted using momentjs. If `format is not provided, toLocaleDateString function is used for formatting.\n* `boolean`: `true` is formatted as 'Yes' and `false` is formatted as 'No'. You can use Literal i18n translations to customize the value.\n* `*` : For everything else, no formatting is applied.",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 6
            },
            "end": {
              "line": 138,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "precision",
          "description": "Decimal display precision for `type` : [number, double , decimal]",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 6
            },
            "end": {
              "line": 147,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "format",
          "description": "Format string used to format",
          "sourceRange": {
            "start": {
              "line": 152,
              "column": 6
            },
            "end": {
              "line": 155,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "layout",
          "description": "Controls the relative positions of `label` and `value`.\n* vertical : label is displayed above the value (much like oe-input)\n* horizontal : label is displayed on left and value on right",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 6
            },
            "end": {
              "line": 165,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "preferred-timezone",
          "description": "If user prefers a different timezone for date to be displayed.",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 6
            },
            "end": {
              "line": 178,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "oe-field-error",
          "description": "Fired when the field is invalid",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "oe-field-ok",
          "description": "Fired when the field is valid",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "register-field",
          "description": "Fired when the element is attached to DOM to register the element",
          "metadata": {},
          "inheritedFrom": "OEFieldMixin"
        },
        {
          "type": "CustomEvent",
          "name": "display-changed",
          "description": "Fired when the `display` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "oe-info",
      "mixins": [
        "OEFieldMixin",
        "OEDataMaskMixin"
      ]
    }
  ]
}
